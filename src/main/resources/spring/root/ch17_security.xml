<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<!-- 인증 절차가 필요없는 경로 설정 -->
	<security:http pattern="/resources/**" security="none"/>

	<!-- 인증 절차를 설정 -->
	<security:http>
		<!-- 인증 방식 설정: Form 인증 방식 -->
		<security:form-login
			login-page="/ch17/loginForm"
			username-parameter="mid"
			password-parameter="mpassword"
			login-processing-url="/login"
			always-use-default-target="true"
			default-target-url="/ch17/content"
			authentication-failure-url="/ch17/loginForm"
			/>
		
		<!-- 로그아웃 설정 -->
		<security:logout 
			logout-url="/logout"
			logout-success-url="/ch17/content"/>
			
		<!-- 사이트간 요청 위조 방지 비활성화 -->
		<security:csrf disabled="true"/>
		
		<!-- 요청 URL 권한 설정 -->
		<security:intercept-url pattern="/ch17/admin*" access="hasRole('ROLE_ADMIN')"/>
		<security:intercept-url pattern="/ch17/manager*" access="hasRole('ROLE_MANAGER')"/>
		<security:intercept-url pattern="/ch17/user*" access="isAuthenticated()"/>
		<security:intercept-url pattern="/**" access="permitAll"/>
		
		<!-- 권한 없음일 경우 보여줄 페이지 설정 -->
		<security:access-denied-handler error-page="/ch17/error403"/>
	</security:http>
	
	<!-- 권한 계층 설정 -->
	<bean id="roleHierarchyAuthoritiesMapper"
		  class="org.springframework.security.access.hierarchicalroles.RoleHierarchyAuthoritiesMapper">
		<constructor-arg ref="roleHierarchyImpl"/>
	</bean>	
	<bean id="roleHierarchyImpl" 
		  class="org.springframework.security.access.hierarchicalroles.RoleHierarchyImpl">
		<property name="hierarchy">
			<value>
				ROLE_ADMIN > ROLE_MANAGER
				ROLE_MANAGER > ROLE_USER
			</value>
		</property>
	</bean>
	
	<!-- 인증 관리자 설정(아이디와 패스워드를 DB와 비교해서 로그인 처리 관리) -->
	<security:authentication-manager>
		<security:authentication-provider ref="daoAuthenticationProvider"/>
	</security:authentication-manager>
	
	<bean id="daoAuthenticationProvider"
		  class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
		<property name="userDetailsService" ref="jdbcUserService"/>
		<property name="authoritiesMapper" ref="roleHierarchyAuthoritiesMapper"/>
	</bean>
	
	<security:jdbc-user-service id="jdbcUserService"
								data-source-ref="dataSource"
								users-by-username-query="SELECT mid, mpassword, menabled FROM member WHERE mid=?"
								authorities-by-username-query="SELECT mid, mrole FROM member WHERE mid=?"/>
</beans>


















